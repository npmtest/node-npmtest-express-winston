{"/home/travis/build/npmtest/node-npmtest-express-winston/test.js":"/* istanbul instrument in package npmtest_express_winston */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-winston/lib.npmtest_express_winston.js":"/* istanbul instrument in package npmtest_express_winston */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_winston = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_winston = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-winston/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-winston && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_winston */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_winston\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_winston.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_winston.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_winston.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_winston.__dirname + '/lib.npmtest_express_winston.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-winston/node_modules/express-winston/index.js":"// Copyright (c) 2012-2014 Heapsource.com and Contributors - http://www.heapsource.com\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\nvar winston = require('winston');\nvar util = require('util');\nvar chalk = require('chalk');\n\nvar _ = require('lodash');\n\n/**\n * A default list of properties in the request object that are allowed to be logged.\n * These properties will be safely included in the meta of the log.\n * 'body' is not included in this list because it can contains passwords and stuff that are sensitive for logging.\n * TODO: Include 'body' and get the defaultRequestFilter to filter the inner properties like 'password' or 'password_confirmation', etc. Pull requests anyone?\n * @type {Array}\n */\nexports.requestWhitelist = ['url', 'headers', 'method', 'httpVersion', 'originalUrl', 'query'];\n\n/**\n * A default list of properties in the request body that are allowed to be logged.\n * This will normally be empty here, since it should be done at the route level.\n * @type {Array}\n */\nexports.bodyWhitelist = [];\n\n/**\n * A default list of properties in the request body that are not allowed to be logged.\n * @type {Array}\n */\nexports.bodyBlacklist = [];\n\n/**\n * A default list of properties in the response object that are allowed to be logged.\n * These properties will be safely included in the meta of the log.\n * @type {Array}\n */\nexports.responseWhitelist = ['statusCode'];\n\n/**\n * A list of request routes that will be skipped instead of being logged. This would be useful if routes for health checks or pings would otherwise pollute\n * your log files.\n * @type {Array}\n */\nexports.ignoredRoutes = [];\n\n/**\n * A default function to filter the properties of the req object.\n * @param req\n * @param propName\n * @return {*}\n */\nexports.defaultRequestFilter = function (req, propName) {\n    return req[propName];\n};\n\n/**\n * A default function to filter the properties of the res object.\n * @param res\n * @param propName\n * @return {*}\n */\nexports.defaultResponseFilter = function (res, propName) {\n    return res[propName];\n};\n\n/**\n * A default function to decide whether skip logging of particular request. Doesn't skip anything (i.e. log all requests).\n * @return always false\n */\nexports.defaultSkip = function() {\n  return false;\n};\n\nfunction filterObject(originalObj, whiteList, initialFilter) {\n\n    var obj = {};\n    var fieldsSet = false;\n\n    [].concat(whiteList).forEach(function (propName) {\n        var value = initialFilter(originalObj, propName);\n\n        if(typeof (value) !== 'undefined') {\n            obj[propName] = value;\n            fieldsSet = true;\n        };\n    });\n\n    return fieldsSet?obj:undefined;\n}\n\n//\n// ### function errorLogger(options)\n// #### @options {Object} options to initialize the middleware.\n//\n\n\nexports.errorLogger = function errorLogger(options) {\n\n    ensureValidOptions(options);\n\n    options.requestWhitelist = options.requestWhitelist || exports.requestWhitelist;\n    options.requestFilter = options.requestFilter || exports.defaultRequestFilter;\n    options.winstonInstance = options.winstonInstance || (new winston.Logger ({ transports: options.transports }));\n    options.msg = options.msg || 'middlewareError';\n    options.baseMeta = options.baseMeta || {};\n    options.metaField = options.metaField || null;\n    options.level = options.level || 'error';\n    options.dynamicMeta = options.dynamicMeta || function(req, res, err) { return null; };\n\n    // Using mustache style templating\n    var template = _.template(options.msg, {\n      interpolate: /\\{\\{([\\s\\S]+?)\\}\\}/g\n    });\n\n    return function (err, req, res, next) {\n\n        // Let winston gather all the error data.\n        var exceptionMeta = winston.exception.getAllInfo(err);\n        exceptionMeta.req = filterObject(req, options.requestWhitelist, options.requestFilter);\n\n        if(options.dynamicMeta) {\n            var dynamicMeta = options.dynamicMeta(req, res, err);\n            exceptionMeta = _.assign(exceptionMeta, dynamicMeta);\n        }\n\n        if (options.metaField) {\n            var newMeta = {};\n            newMeta[options.metaField] = exceptionMeta;\n            exceptionMeta = newMeta;\n        }\n\n        exceptionMeta = _.assign(exceptionMeta, options.baseMeta);\n\n        // This is fire and forget, we don't want logging to hold up the request so don't wait for the callback\n        options.winstonInstance.log(options.level, template({err: err, req: req, res: res}), exceptionMeta);\n\n        next(err);\n    };\n};\n\n//\n// ### function logger(options)\n// #### @options {Object} options to initialize the middleware.\n//\n\n\nexports.logger = function logger(options) {\n\n    ensureValidOptions(options);\n    ensureValidLoggerOptions(options);\n\n    options.requestWhitelist = options.requestWhitelist || exports.requestWhitelist;\n    options.bodyWhitelist = options.bodyWhitelist || exports.bodyWhitelist;\n    options.bodyBlacklist = options.bodyBlacklist || exports.bodyBlacklist;\n    options.responseWhitelist = options.responseWhitelist || exports.responseWhitelist;\n    options.requestFilter = options.requestFilter || exports.defaultRequestFilter;\n    options.responseFilter = options.responseFilter || exports.defaultResponseFilter;\n    options.ignoredRoutes = options.ignoredRoutes || exports.ignoredRoutes;\n    options.winstonInstance = options.winstonInstance || (new winston.Logger ({ transports: options.transports }));\n    options.level = options.level || \"info\";\n    options.statusLevels = options.statusLevels || false;\n    options.msg = options.msg || \"HTTP {{req.method}} {{req.url}}\";\n    options.baseMeta = options.baseMeta || {};\n    options.metaField = options.metaField || null;\n    options.colorize = options.colorize || false;\n    options.expressFormat = options.expressFormat || false;\n    options.ignoreRoute = options.ignoreRoute || function () { return false; };\n    options.skip = options.skip || exports.defaultSkip;\n    options.dynamicMeta = options.dynamicMeta || function(req, res) { return null; };\n\n    return function (req, res, next) {\n        var coloredRes = {};\n\n        var currentUrl = req.originalUrl || req.url;\n        if (currentUrl && _.includes(options.ignoredRoutes, currentUrl)) return next();\n        if (options.ignoreRoute(req, res)) return next();\n\n        req._startTime = (new Date);\n\n        req._routeWhitelists = {\n            req: [],\n            res: [],\n            body: []\n        };\n\n        req._routeBlacklists = {\n            body: []\n        };\n\n        // Manage to get information from the response too, just like Connect.logger does:\n        var end = res.end;\n        res.end = function(chunk, encoding) {\n            res.responseTime = (new Date) - req._startTime;\n\n            res.end = end;\n            res.end(chunk, encoding);\n\n            req.url = req.originalUrl || req.url;\n\n            if (options.statusLevels) {\n              if (res.statusCode >= 100) { options.level = options.statusLevels.success || \"info\"; }\n              if (res.statusCode >= 400) { options.level = options.statusLevels.warn || \"warn\"; }\n              if (res.statusCode >= 500) { options.level = options.statusLevels.error || \"error\"; }\n            };\n\n            var meta = {};\n\n            if(options.meta !== false) {\n              var logData = {};\n\n              var requestWhitelist = options.requestWhitelist.concat(req._routeWhitelists.req || []);\n              var responseWhitelist = options.responseWhitelist.concat(req._routeWhitelists.res || []);\n\n              logData.res = res;\n\n              if (_.includes(responseWhitelist, 'body')) {\n                if (chunk) {\n                  var isJson = (res._headers && res._headers['content-type']\n                    && res._headers['content-type'].indexOf('json') >= 0);\n\n                  logData.res.body = bodyToString(chunk, isJson);\n                }\n              }\n\n              logData.req = filterObject(req, requestWhitelist, options.requestFilter);\n              logData.res = filterObject(res, responseWhitelist, options.responseFilter);\n\n              var bodyWhitelist = _.union(options.bodyWhitelist, (req._routeWhitelists.body || []));\n              var blacklist = _.union(options.bodyBlacklist, (req._routeBlacklists.body || []));\n\n              var filteredBody = null;\n\n              if ( req.body !== undefined ) {\n                  if (blacklist.length > 0 && bodyWhitelist.length === 0) {\n                    var whitelist = _.difference(Object.keys(req.body), blacklist);\n                    filteredBody = filterObject(req.body, whitelist, options.requestFilter);\n                  } else if (\n                    requestWhitelist.indexOf('body') !== -1 &&\n                    bodyWhitelist.length === 0 &&\n                    blacklist.length === 0\n                  ) {\n                    filteredBody = filterObject(req.body, Object.keys(req.body), options.requestFilter);\n                  } else {\n                    filteredBody = filterObject(req.body, bodyWhitelist, options.requestFilter);\n                  }\n              }\n\n              if (logData.req) {\n                if (filteredBody) {\n                  logData.req.body = filteredBody;\n                } else {\n                  delete logData.req.body;\n                }\n              }\n\n              logData.responseTime = res.responseTime;\n\n              if(options.dynamicMeta) {\n                  var dynamicMeta = options.dynamicMeta(req, res);\n                  logData = _.assign(logData, dynamicMeta);\n              }\n\n              if (options.metaField) {\n                  var newMeta = {};\n                  newMeta[options.metaField] = logData;\n                  logData = newMeta;\n              }\n              meta = _.assign(meta, logData);\n            }\n\n            meta = _.assign(meta, options.baseMeta);\n\n            var expressMsgFormat = \"{{req.method}} {{req.url}} {{res.statusCode}} {{res.responseTime}}ms\";\n            if (options.colorize) {\n              // Palette from https://github.com/expressjs/morgan/blob/master/index.js#L205\n              var statusColor = 'green';\n              if (res.statusCode >= 500) statusColor = 'red';\n              else if (res.statusCode >= 400) statusColor = 'yellow';\n              else if (res.statusCode >= 300) statusColor = 'cyan';\n\n              expressMsgFormat = chalk.grey(\"{{req.method}} {{req.url}}\") +\n                \" {{res.statusCode}} \" +\n                chalk.grey(\"{{res.responseTime}}ms\");\n              coloredRes.statusCode = chalk[statusColor](res.statusCode);\n            }\n            var msgFormat = !options.expressFormat ? options.msg : expressMsgFormat;\n\n            // Using mustache style templating\n            var template = _.template(msgFormat, {\n              interpolate: /\\{\\{(.+?)\\}\\}/g\n            });\n\n            var msg = template({req: req, res: _.assign({}, res, coloredRes)});\n\n            // This is fire and forget, we don't want logging to hold up the request so don't wait for the callback\n            if (!options.skip(req, res)) {\n              options.winstonInstance.log(options.level, msg, meta);\n            }\n        };\n\n        next();\n    };\n};\n\nfunction safeJSONParse(string) {\n    try {\n        return JSON.parse(string);\n    } catch (e) {\n        return undefined;\n    }\n}\n\nfunction bodyToString(body, isJSON) {\n    var stringBody = body && body.toString();\n    if (isJSON) {\n        return (safeJSONParse(body) || stringBody);\n    }\n    return stringBody;\n}\n\nfunction ensureValidOptions(options) {\n    if(!options) throw new Error(\"options are required by express-winston middleware\");\n    if(!((options.transports && (options.transports.length > 0)) || options.winstonInstance))\n        throw new Error(\"transports or a winstonInstance are required by express-winston middleware\");\n\n    if (options.dynamicMeta && !_.isFunction(options.dynamicMeta)) {\n        throw new Error(\"`dynamicMeta` express-winston option should be a function\");\n    }\n}\n\nfunction ensureValidLoggerOptions(options) {\n    if (options.ignoreRoute && !_.isFunction(options.ignoreRoute)) {\n        throw new Error(\"`ignoreRoute` express-winston option should be a function\");\n    }\n}\n"}